{"version":3,"sources":["ValidationBanner.js","Instructions.js","CharBox.js","App.js","serviceWorker.js","index.js"],"names":["ValidationBanner","props","className","style","color","textLength","Instructions","href","CharBox","onClick","e","handleRemoveChar","i","char","App","handleInputTextChange","setState","inputText","target","value","state","split","splice","join","charList","this","map","text","key","length","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVA0BeA,MApBf,SAA0BC,GAQxB,OACE,yBAAKC,UAAU,oBAAoBC,MAN5B,CACLC,MAAOH,EAAMI,YANK,EAM2B,QAAU,QAKzD,QACQJ,EAAMI,YAZM,EAY0B,cAAgB,c,MCSnDC,MAtBf,SAAsBL,GACpB,OACE,yBAAKC,UAAU,gBACb,qCAEA,4EAAiD,uBAAGK,KAAK,oEAAR,4BAAjD,KACA,0KACA,0CAEA,wBAAIL,UAAU,sBACZ,4KACA,wHACA,mLACA,+MACA,gLACA,8G,MCIOM,MAlBf,SAAiBP,GAMf,OACE,yBAAKC,UAAU,WAAWO,QAL5B,SAA0BC,GACxBT,EAAMU,iBAAiBV,EAAMW,KAK3B,2BAAIX,EAAMY,QCsCDC,G,kBA1Cb,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KAMRc,sBAAwB,SAAAL,GACtB,EAAKM,SAAS,CAAEC,UAAWP,EAAEQ,OAAOC,SARnB,EAWnBR,iBAAmB,SAAAC,GACjB,IAAIK,EAAY,EAAKG,MAAMH,UAAUI,MAAM,IAC3CJ,EAAUK,OAAOV,EAAG,GACpBK,EAAYA,EAAUM,KAAK,IAC3B,EAAKP,SAAS,CAAEC,eAbhB,EAAKG,MAAQ,CACXH,UAAW,IAHI,E,sEAkBT,IAAD,OAEDO,EAAWC,KAAKL,MAAMH,UAAUI,MAAM,IAAIK,KAAI,SAACC,EAAMf,GAAP,OAClD,kBAAC,EAAD,CAASgB,IAAKhB,EAAGC,KAAMc,EAAMf,EAAGA,EAAGD,iBAAkB,EAAKA,sBAG5D,OACE,yBAAKT,UAAU,OACb,wBAAIA,UAAU,mBAAd,yCACA,yBAAKA,UAAU,6BACb,kBAAC,EAAD,CAAkBG,WAAYoB,KAAKL,MAAMH,UAAUY,SACnD,2BAAO3B,UAAU,kBAAkB4B,KAAK,OAAOX,MAAOM,KAAKL,MAAMH,UAAWc,SAAUN,KAAKV,wBAC3F,2CAAiBU,KAAKL,MAAMH,UAAUY,QACtC,yBAAK3B,UAAU,aACZsB,IAGL,kBAAC,EAAD,W,GArCUQ,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc985e1d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ValidationBanner.css';\n\nconst MIN_TEXT_LENGTH = 5;\n\nfunction ValidationBanner(props) {\n\n  function setTextStyle() {\n    return {\n      color: props.textLength >= MIN_TEXT_LENGTH ? 'green' : 'red',\n    };\n  }\n\n  return (\n    <div className=\"validation-banner\" style={setTextStyle()}>\n      Text {props.textLength >= MIN_TEXT_LENGTH ? 'long enough' : 'too short'}\n    </div>\n  );\n  \n}\n\nValidationBanner.propTypes = {\n  textLength: PropTypes.number.isRequired,\n};\n\nexport default ValidationBanner;","import React from 'react';\nimport './Instructions.css';\n\nfunction Instructions(props) {\n  return (\n    <div className=\"instructions\">\n      <h2>About</h2>\n\n      <p>This is the second assignment from the course <a href=\"https://www.udemy.com/course/react-the-complete-guide-incl-redux\">React The Complete Guide</a>.</p>\n      <p>Enter characters in the text input, and boxes representing the characters will appear. Click the boxes to remove characters from the input.</p>\n      <h3>Assignment</h3>\n\n      <ol className=\"instructions__list\">\n        <li>Create an input field (in App component) with a change listener which outputs the length of the entered text below it (e.g. in a paragraph).</li>\n        <li>Create a new component (=> ValidationComponent) which receives the text length as a prop</li>\n        <li>Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough\" depending on the text length (e.g. take 5 as a minimum length)</li>\n        <li>Create another component (=> CharComponent) and style it as an inline box (=> display: inline-block, padding: 16px, text-align: center, margin: 16px, border: 1px solid black).</li>\n        <li>Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in the initial input field) as a prop.</li>\n        <li>When you click a CharComponent, it should be removed from the entered text.</li>\n      </ol>\n\n    </div>\n  );\n}\n\nexport default Instructions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CharBox.css';\n\nfunction CharBox(props) {\n\n  function handleRemoveChar(e) {\n    props.handleRemoveChar(props.i);\n  }\n\n  return (\n    <div className=\"char-box\" onClick={handleRemoveChar}>\n      <p>{props.char}</p>\n    </div>\n  );\n}\n\nCharBox.propTypes = {\n  char: PropTypes.string.isRequired,\n  handleRemoveChar: PropTypes.func.isRequired,\n};\n\nexport default CharBox;","import React from 'react';\nimport ValidationBanner from './ValidationBanner';\nimport Instructions from './Instructions';\nimport CharBox from './CharBox';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: '',\n    };\n  }\n\n  handleInputTextChange = e => {\n    this.setState({ inputText: e.target.value });\n  };\n\n  handleRemoveChar = i => {\n    let inputText = this.state.inputText.split('')\n    inputText.splice(i, 1);\n    inputText = inputText.join('');\n    this.setState({ inputText });\n  };\n\n  render() {\n\n    const charList = this.state.inputText.split('').map((text, i) => (\n      <CharBox key={i} char={text} i={i} handleRemoveChar={this.handleRemoveChar} />\n    ));\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__page-title\">Assignment Two - React Complete Guide</h1>\n        <div className=\"app__assignment-container\">\n          <ValidationBanner textLength={this.state.inputText.length} />\n          <input className=\"app__text-input\" type=\"text\" value={this.state.inputText} onChange={this.handleInputTextChange} />\n          <p>Text length: {this.state.inputText.length}</p>\n          <div className=\"char-list\">\n            {charList}\n          </div>\n        </div>\n        <Instructions />\n      </div>\n    );  \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}